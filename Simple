import numpy as np
import math
import gymnasium
from gymnasium import spaces

class Reliability(gymnasium.Env):
    metadata = {"render_modes": ["rgb_array"], "render_fps": 4}

    def __init__(self):
        # action space: no action(0), maintenance(1)
        self.action_space = spaces.Discrete(2)
	# observation space: time since last maintenance in weeks
        low = np.array([0])
        high = np.array([99999])
        self.observation_space = spaces.Box(low, high, dtype=np.float32)
        self.state = None

    def step(self, action):
        reward = 0
        done = False
        power_capacity = 5
        capacity_factor = 0.49
        production_hours = 7*24
        value_of_MWh = 40
        weekly_power_produced = power_capacity * capacity_factor * production_hours
        cost_of_replacement = -500000
        MTTF = 20*52
        reliability_sys = math.exp(-self.state/MTTF)
        if action == 0:
            reward = reliability_sys * weekly_power_produced * value_of_MWh
            self.state += 1
        elif action == 1:
            reward = cost_of_replacement
            self.state = 0
        self.runtime += 1
        if self.runtime >= 3000000:
            done=True
        truncated = False
        info = {}
        return np.array([self.state], dtype=np.float32), reward, done, truncated, info

    def render(self):
        pass

    def reset(self, seed = None, options = None):
        super().reset(seed = seed)
        self.runtime = 0
        info = {}
        self.state = 0
        return np.array([self.state], dtype=np.float32), info
    
